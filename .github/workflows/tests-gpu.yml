name: GPU Tests
on:
  push:
    branches:
      - master
  workflow_dispatch:
    inputs:
      pullRequestNumber:
        description: 'The pull request number for which to run the GPU unit tests on. To run on a branch instead of pull request, set the value to the default -1'
        required: false
        default: '-1'
        type: string

env:
  COVERAGE_FLAGS: "--cov=pennylane --cov-report=term-missing --cov-report=xml --no-flaky-report -p no:warnings --tb=native"

concurrency:
  group: gpu-test-${{ github.ref }}
  cancel-in-progress: true

jobs:
  set-source-pennylane-repository:
    runs-on: ubuntu-latest

    steps:
      - id: fetch_pull_request_source_information
        if: github.event.inputs.pullRequestNumber != '-1' && github.event.inputs.pullRequestNumber != ''
        uses: actions/github-script@v6
        with:
          script: |
            const pullRequestInformation = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: ${{ github.event.inputs.pullRequestNumber }}
            });
            return pullRequestInformation.data.head;

      - id: repository_name
        if: github.event.inputs.pullRequestNumber != '-1' && github.event.inputs.pullRequestNumber != ''
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const pullRequestInformation = ${{ steps.fetch_pull_request_source_information.outputs.result }};
            return pullRequestInformation.repo.full_name;

      - id: repository_ref
        if: github.event.inputs.pullRequestNumber != '-1' && github.event.inputs.pullRequestNumber != ''
        uses: actions/github-script@v6
        with:
          result-encoding: string
          script: |
            const pullRequestInformation = ${{ steps.fetch_pull_request_source_information.outputs.result }}
            return pullRequestInformation.sha;

    outputs:
      repository-name: ${{ steps.repository_name.outputs.result || github.repository }}
      repository-ref: ${{ steps.repository_ref.outputs.result || github.ref }}

  gpu-tests:
    runs-on:
      - self-hosted
      - ubuntu-22.04
      - gpu

    needs:
      - set-source-pennylane-repository

    strategy:
      max-parallel: 1
      matrix:
        python-version:
          - 3.7
          - 3.8
          - 3.9
          - '3.10'

    env:
      TORCH_VERSION: 1.10.0+cpu
      SUITE: gpu

    steps:
      - name: Update PATH and LD_LIBRARY_PATH
        run: |
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          echo "/usr/local/cuda/bin" >> $GITHUB_PATH
          
          echo "LD_LIBRARY_PATH=/usr/local/cuda/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}" >> $GITHUB_ENV

      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          repository: ${{ needs.set-source-pennylane-repository.outputs.repository-name }}
          ref: ${{ needs.set-source-pennylane-repository.outputs.repository-ref }}
          fetch-depth: 1

      - name: Setup Python
        id: setup_python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      # Since the self-hosted runner can be re-used. It is best to set up all package
      # installations in a virtual environment that gets cleaned at the end of each workflow run
      - name: Setup Python virtual environment
        id: setup_venv
        env:
          VENV_NAME: venv_${{ steps.setup_python.outputs.python-version }}_${{ github.sha }}
        run: |
          # Clear any pre-existing venvs
          rm -rf venv_*
          
          # Create new venv for this workflow_run
          python --version
          python -m venv ${{ env.VENV_NAME }}
          
          # Add the venv to PATH for subsequent steps
          echo ${{ env.VENV_NAME }}/bin >> $GITHUB_PATH
          
          # Adding venv name as an output for subsequent steps to reference if needed
          echo "::set-output name=venv_name::${{ env.VENV_NAME }}"

      - name: Display Python-Path
        run: |
          which python
          which pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip && pip install wheel --upgrade
          pip install -r requirements-ci.txt --upgrade
          pip install -r requirements-dev.txt --upgrade

      - name: Install Torch
        run: |
          python -m pip install torch==1.11.0+cu113 torchvision==0.12.0+cu113 torchaudio==0.11.0+cu113 -f https://download.pytorch.org/whl/cu113/torch_stable.html

      - name: Install PennyLane
        run: |
          python setup.py bdist_wheel
          pip install dist/PennyLane*.whl

      - name: Install Lightning-master
        run: python -m pip install -i https://test.pypi.org/simple/ PennyLane-Lightning --pre --upgrade

      - name: Run tests
        run: echo "hello world"
        # run: python -m pytest tests -m "${{ env.SUITE }}"

      - name: Adjust coverage file for Codecov
        run: bash <(sed -i 's/filename=\"/filename=\"pennylane\//g' coverage.xml)

      # Cleans up the working directory so subsequent jobs on same runner get a clean working directory
      # This step runs even if any of the previous steps fail
      - name: Cleanup
        if: always()
        run: |
          rm -rf ${{ steps.setup_venv.outputs.venv_name }}
          rm -rf *
          rm -rf .git
          rm -rf .gitignore
          rm -rf .github

      - name: Report Status
        if: success() && github.event_name == 'workflow_dispatch'
        uses: actions/github-script@v6
        with:
          script: |
            const repositoryFullName = "${{ needs.set-source-pennylane-repository.outputs.repository-name }}";
            const repositoryRef = "${{ needs.set-source-pennylane-repository.outputs.repository-ref }}";
            
            const repositoryNameParts = repositoryFullName.split("/");
            const repositoryOwner = repositoryNameParts[0];
            const repositoryName = repositoryNameParts[1];
            
            await github.rest.repos.createCommitStatus({
              owner: repositoryOwner,
              repo: repositoryName,
              sha: repositoryRef,
              state: "success",
              target_url: "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
              context: "actions/pennylane/gpu-tests"
            });
